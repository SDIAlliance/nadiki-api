openapi: 3.0.0
info:
  title: Server Registry API
  version: '1.0.0'
  description: |
    API for registering and managing data center servers.
    
    ## Metric Mapping Configuration
    When registering a server, you can provide a metric mapping configuration that specifies how your 
    monitoring system's metrics should be mapped to the standard target metrics. This allows flexible 
    integration with various monitoring solutions (Prometheus, Zabbix, custom systems, etc.).
    
    Each target metric can be mapped to either:
    - A single metric configuration object
    - An array of metric configurations (for multi-device scenarios like multiple GPUs)
    
    The system will use this mapping to generate the appropriate InfluxDB data points configuration
    in the response, allowing you to stream your metrics with the correct field names and tags.

servers:
  - url: https://api.registry.example.com/v1
    description: Registry API v1

paths:
  /servers:
    post:
      summary: Register a new server
      description: Create a new server entry in the registry
      operationId: createServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerCreate'
            example:
              facility_id: "FACILITY-NLD-001"
              rack_id: "RACK-FACILITY-NLD-001-042"
              cooling_type: "air"
              total_cpu_sockets: 2
              installed_cpus:
                - vendor: "Intel"
                  type: "Xeon Gold 6248R"
              number_of_psus: 2
              total_installed_memory: 256
              number_of_memory_units: 8
              metric_mapping:
                server_power_consumption:
                  input_metric_unit: "Watt"
                  input_metric_type: "Gauge"
                  input_metric_name: "ipmi_dcmi_power_consumption_watts"
                  measurement_interval: 30
                cpu_utilization:
                  input_metric_unit: "Seconds"
                  input_metric_type: "Counter"
                  input_metric_name: "node_cpu_seconds_total"
                  measurement_interval: 15
                gpu_power_consumption:
                  - device_name: "gpu_0"
                    input_metric_unit: "Watt"
                    input_metric_type: "Gauge"
                    input_metric_name: "nvidia_smi_power_draw_watts"
                    measurement_interval: 15
                  - device_name: "gpu_1"
                    input_metric_unit: "Watt"
                    input_metric_type: "Gauge"
                    input_metric_name: "nvidia_smi_power_draw_watts"
                    measurement_interval: 15
      responses:
        '201':
          description: Server successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List all servers
      description: Retrieve a list of all registered servers
      operationId: listServers
      parameters:
        - name: limit
          in: query
          description: Maximum number of servers to return
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of servers to skip
          required: false
          schema:
            type: integer
            default: 0
        - name: facility_id
          in: query
          description: Filter servers by facility ID
          required: false
          schema:
            type: string
        - name: rack_id
          in: query
          description: Filter servers by rack ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of servers
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServerResponse'
                  total:
                    type: integer
                    description: Total number of servers
                  limit:
                    type: integer
                    description: Number of servers per page
                  offset:
                    type: integer
                    description: Current offset

  /servers/{serverId}:
    parameters:
      - name: serverId
        in: path
        required: true
        schema:
          type: string
        description: Unique server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])
    get:
      summary: Get server details
      description: Retrieve detailed information about a specific server
      operationId: getServer
      responses:
        '200':
          description: Server details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update server
      description: Update all server information
      operationId: updateServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerUpdate'
      responses:
        '200':
          description: Server successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete server
      description: Remove a server from the registry
      operationId: deleteServer
      responses:
        '204':
          description: Server successfully deleted
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    MetricMappingConfiguration:
      type: object
      required:
        - input_metric_unit
        - input_metric_type
        - input_metric_name
        - measurement_interval
      properties:
        input_metric_unit:
          type: string
          enum: [Watt, Seconds, Percentage, Fraction, Bytes]
          description: Unit of the input metric
        input_metric_type:
          type: string
          enum: [Gauge, Counter]
          description: Type of metric (Gauge for current values, Counter for cumulative values)
        input_metric_name:
          type: string
          description: Name of the input metric as it appears in the source system
          example: ipmi_dcmi_power_consumption_watts
        measurement_interval:
          type: integer
          minimum: 1
          description: Measurement interval in seconds
        device_name:
          type: string
          description: Device name, only used when an array is passed to the target metric
          example: gpu_0

    MetricMappingObject:
      type: object
      properties:
        server_power_consumption:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        cpu_utilization:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        cpu_power_consumption:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        cpu_surface_temperature:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        gpu_utilization:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        gpu_power_consumption:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        gpu_memory_utilization:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        fpga_utilization:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        fpga_power_consumption:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        fpga_memory_utilization:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        memory_free:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        memory_available:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        memory_utilization:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        memory_power:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        server_fan_speed:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        network_traffic_received_bytes:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        network_traffic_transmitted_bytes:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        network_traffic_received_packets:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        network_traffic_transmitted_packets:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        storage_read_bytes:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        storage_written_bytes:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        storage_read_completed:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
        storage_written_completed:
          oneOf:
            - $ref: '#/components/schemas/MetricMappingConfiguration'
            - type: array
              items:
                $ref: '#/components/schemas/MetricMappingConfiguration'
      additionalProperties: false
      description: Mapping of target metrics to their input configurations

    CPU:
      type: object
      required:
        - vendor
        - type
      properties:
        vendor:
          type: string
          description: CPU vendor (e.g., Intel, AMD)
        type:
          type: string
          description: CPU type identifier

    GPU:
      type: object
      required:
        - vendor
        - type
      properties:
        vendor:
          type: string
          description: GPU vendor (e.g., Nvidia, AMD)
        type:
          type: string
          description: GPU type identifier

    FPGA:
      type: object
      required:
        - vendor
        - type
      properties:
        vendor:
          type: string
          description: FPGA vendor (e.g., Intel, Xilinx)
        type:
          type: string
          description: FPGA type identifier

    StorageDevice:
      type: object
      required:
        - vendor
        - capacity
        - type
      properties:
        vendor:
          type: string
          description: Disk vendor (e.g., Samsung, Intel)
        capacity:
          type: number
          format: float
          description: Disk capacity in TB
        type:
          type: string
          enum: [NVMe, SSD, HDD, Other]
          description: Type of storage device

    ServerCreate:
      type: object
      required:
        - facility_id
        - rack_id
        - cooling_type
      properties:
        facility_id:
          type: string
          description: ID of the facility where the server is located
        rack_id:
          type: string
          description: ID of the rack where the server is installed
        rated_power:
          type: number
          format: float
          description: Rated power in kW
        total_cpu_sockets:
          type: integer
          minimum: 1
          default: 2
          description: Total number of CPU sockets
        installed_cpus:
          type: array
          items:
            $ref: '#/components/schemas/CPU'
          description: Array of installed CPUs
        number_of_psus:
          type: integer
          minimum: 1
          default: 2
          description: Number of power supply units
        total_installed_memory:
          type: integer
          description: Total installed memory in GB
        number_of_memory_units:
          type: integer
          description: Number of memory units installed
        storage_devices:
          type: array
          items:
            $ref: '#/components/schemas/StorageDevice'
          description: Array of installed storage devices
        installed_gpus:
          type: array
          items:
            $ref: '#/components/schemas/GPU'
          description: Array of installed GPUs
        installed_fpgas:
          type: array
          items:
            $ref: '#/components/schemas/FPGA'
          description: Array of installed FPGAs
        product_passport:
          type: object
          description: LCA product passport data
        cooling_type:
          type: string
          enum: [direct-to-chip, immersion, back-door-liquid, back-door-fan, air]
          default: air
          description: Type of cooling system used for this server
        description:
          type: string
          description: Textual description ob the facility for informational purposes
        metric_mapping:
          $ref: '#/components/schemas/MetricMappingObject'

    ServerUpdate:
      allOf:
        - $ref: '#/components/schemas/ServerCreate'
        - type: object
          required:
            - facility_id
            - rack_id
            - cooling_type

    ServerTimeSeriesDataPoint:
      type: object
      required:
        - measurement
        - field
        - granularitySeconds
        - tags
      properties:
        measurement:
          type: string
          description: Name of the Influx measurement
          enum:
            - facility
            - rack
            - server
        field:
          type: string
          description: Metric name to be written to InfluxDB (derived from target_metric in the mapping)
        granularitySeconds:
          type: integer
          description: Time series data granularity in seconds (from measurement_interval in the mapping)
        tags:
          type: object
          required:
            - facility_id
            - rack_id
            - server_id
            - country_code
          properties:
            facility_id:
              type: string
              description: Facility identifier
            rack_id:
              type: string
              description: Rack identifier
            server_id:
              type: string
              description: Server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])
            country_code:
              type: string
              description: ISO 3166-1 alpha-3 country code
            device_name:
              type: string
              description: Device name when multiple devices are mapped to a single target metric

    ServerTimeSeriesConfig:
      type: object
      required:
        - endpoint
        - org
        - bucket
        - token
        - dataPoints
      properties:
        endpoint:
          type: string
          description: InfluxDB endpoint URL with port number
          example: https://timeseries.registry.example.com:8086
        org:
          type: string
          description: InfluxDB organization to use
          example: leitmotiv
        bucket:
          type: string
          description: InfluxDB bucket to send data to
          example: my-bucket
        token:
          type: string
          description: InfluxDB token to use for authentication
          example: ABCDEFGHIJK
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/ServerTimeSeriesDataPoint'
          description: List of time series metrics available for streaming

    ServerResponse:
      allOf:
        - $ref: '#/components/schemas/ServerCreate'
        - type: object
          required:
            - id
            - timeSeriesConfig
          properties:
            id:
              type: string
              description: Unique server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])
              example: SERVER-FACILITY-NLD-001-RACK-001-001
            timeSeriesConfig:
              $ref: '#/components/schemas/ServerTimeSeriesConfig'
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

tags:
  - name: Metric Mapping
    description: |
      The server API supports flexible metric mapping configuration. When registering a server, 
      you can specify how your monitoring system's metrics map to the following target metrics:
      
      ## Supported Target Metrics
      - `server_power_consumption` - Overall server power consumption
      - `cpu_utilization` - CPU usage percentage or time
      - `cpu_power_consumption` - CPU-specific power consumption  
      - `cpu_surface_temperature` - CPU temperature readings
      - `gpu_utilization` - GPU usage percentage
      - `gpu_power_consumption` - GPU power consumption
      - `gpu_memory_utilization` - GPU memory usage
      - `fpga_utilization` - FPGA usage percentage
      - `fpga_power_consumption` - FPGA power consumption
      - `fpga_memory_utilization` - FPGA memory usage
      - `memory_free` - Available memory
      - `memory_available` - Total available memory
      - `memory_utilization` - Memory usage percentage
      - `memory_power` - Memory power consumption
      - `server_fan_speed` - Fan speed (RPM or percentage)
      - `network_traffic_received_bytes` - Network RX bytes
      - `network_traffic_transmitted_bytes` - Network TX bytes
      - `network_traffic_received_packets` - Network RX packets
      - `network_traffic_transmitted_packets` - Network TX packets
      - `storage_read_bytes` - Storage read throughput
      - `storage_written_bytes` - Storage write throughput
      - `storage_read_completed` - Storage read operations
      - `storage_written_completed` - Storage write operations