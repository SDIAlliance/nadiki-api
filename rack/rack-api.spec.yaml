openapi: 3.1.0
info:
  title: Rack Registry API
  version: '1.0.0'
  description: |
    API for registering and managing data center racks.
    
    ## Metric Naming Conventions
    For racks with multiple PDUs, individual PDU metrics follow the pattern:
    
    - pdu_1_energy_consumption_joules
    - pdu_2_energy_consumption_joules
    
    Where the number corresponds to the PDU identifier in the rack.

servers:
  - url: https://api.registry.example.com/v1
    description: Registry API v1

paths:
  /racks:
    post:
      summary: Register a new rack
      description: Create a new rack entry in the registry
      operationId: createRack
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RackCreate'
      responses:
        '201':
          description: Rack successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List all racks
      description: Retrieve a list of all registered racks
      operationId: listRacks
      parameters:
        - name: limit
          in: query
          description: Maximum number of racks to return
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of racks to skip
          required: false
          schema:
            type: integer
            default: 0
        - name: facility_id
          in: query
          description: Filter racks by facility ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of racks
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/RackResponse'
                  total:
                    type: integer
                    description: Total number of racks
                  limit:
                    type: integer
                    description: Number of racks per page
                  offset:
                    type: integer
                    description: Current offset

  /racks/{rackId}:
    parameters:
      - name: rackId
        in: path
        required: true
        schema:
          type: string
        description: Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])
    get:
      summary: Get rack details
      description: Retrieve detailed information about a specific rack
      operationId: getRack
      responses:
        '200':
          description: Rack details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackResponse'
        '404':
          description: Rack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update rack
      description: Update all rack information
      operationId: updateRack
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RackUpdate'
      responses:
        '200':
          description: Rack successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Rack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete rack
      description: Remove a rack from the registry
      operationId: deleteRack
      responses:
        '204':
          description: Rack successfully deleted
        '404':
          description: Rack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /racks/{rackId}/query:
    parameters:
      - name: rackId
        in: path
        required: true
        schema:
          type: string
        description: Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])
    post:
      summary: Query rack metrics
      description: Retrieve aggregated time series metrics for a rack over a specified time period
      operationId: queryRackMetrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricsQuery'
      responses:
        '200':
          description: Aggregated metrics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsQueryResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Rack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    RackCreate:
      type: object
      required:
        - facility_id
      properties:
        facility_id:
          type: string
          description: ID of the facility where the rack is located
        total_available_power:
          type: number
          format: float
          description: Total available power in kW
          default: 5
        total_available_cooling_capacity:
          type: number
          format: float
          description: Total available cooling capacity in kW
          default: 5
        number_of_pdus:
          type: integer
          minimum: 1
          description: Number of PDUs in the rack
          default: 2
        power_redundancy:
          type: integer
          minimum: 1
          description: Number of power feeds used for redundancy
          default: 2
        product_passport:
          type: object
          description: LCA product passport data
          
    RackUpdate:
      allOf:
        - $ref: '#/components/schemas/RackCreate'
        - type: object
          required:
            - facility_id

    TimeSeriesDataPoint:
      type: object
      required:
        - name
        - unit
        - granularitySeconds
        - labels
      properties:
        name:
          type: string
          description: |
            Prometheus metric name with unit suffix. For PDU metrics, 
            the name must follow the pattern 'pdu_N_energy_consumption_joules' 
            where N is the PDU number (1 to number_of_pdus)
          pattern: ^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$
        unit:
          type: string
          enum: [Time, Temperature, Length, Bytes, Percent, Voltage, "Electric current", Energy, Power, Mass]
          description: Prometheus metric family
        granularitySeconds:
          type: integer
          description: Time series data granularity in seconds
          default: 30
        labels:
          type: object
          required:
            - facility_id
            - rack_id
            - country_code
          properties:
            facility_id:
              type: string
              description: Facility identifier
            rack_id:
              type: string
              description: Rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])
            country_code:
              type: string
              description: ISO 3166-1 alpha-3 country code

    TimeSeriesConfig:
      type: object
      required:
        - endpoint
        - dataPoints
      properties:
        endpoint:
          type: string
          description: Time series endpoint URL with port number
          example: https://timeseries.registry.example.com:9090
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
          description: List of time series metrics available for streaming

    RackResponse:
      allOf:
        - $ref: '#/components/schemas/RackCreate'
        - type: object
          required:
            - id
            - facility_id
            - timeSeriesConfig
          properties:
            id:
              type: string
              description: Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])
              example: RACK-FACILITY-NLD-001-001
            timeSeriesConfig:
              $ref: '#/components/schemas/TimeSeriesConfig'
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    MetricsQuery:
      type: object
      required:
        - startTime
        - endTime
        - aggregation
      properties:
        startTime:
          type: string
          format: date-time
          description: Start timestamp for the query period
        endTime:
          type: string
          format: date-time
          description: End timestamp for the query period
        aggregation:
          type: string
          enum: [sum, average]
          description: Aggregation function to apply over the time period
        metrics:
          type: array
          description: Optional list of specific metrics to query. If not provided, all available metrics will be returned.
          items:
            type: string
            pattern: ^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$

    MetricsQueryResponse:
      type: object
      required:
        - facility_id
        - rack_id
        - startTime
        - endTime
        - aggregation
        - metrics
      properties:
        facility_id:
          type: string
          description: Facility identifier
        rack_id:
          type: string
          description: Rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])
        startTime:
          type: string
          format: date-time
          description: Start timestamp of the query period
        endTime:
          type: string
          format: date-time
          description: End timestamp of the query period
        aggregation:
          type: string
          enum: [sum, average]
          description: Aggregation function that was applied
        metrics:
          type: array
          items:
            type: object
            required:
              - name
              - value
              - unit
              - granularitySeconds
            properties:
              name:
                type: string
                description: Name of the metric
                pattern: ^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$
              value:
                type: number
                format: float
                description: Aggregated value over the time period
              unit:
                type: string
                enum: [Time, Temperature, Length, Bytes, Percent, Voltage, "Electric current", Energy, Power, Mass]
                description: Unit of the metric
              granularitySeconds:
                type: integer
                description: Original granularity of the data points in seconds

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

  x-supported-timeseries-metrics:
    description: List of all supported time series metrics for rack monitoring
    metrics:
      - name: pdu_N_energy_consumption_joules
        unit: Energy
        description: |
          Energy consumption reading from PDU number N. 
          Multiple metrics will exist based on number_of_pdus, 
          e.g., pdu_1_energy_consumption_joules, pdu_2_energy_consumption_joules
      - name: inlet_temperature_celsius
        unit: Temperature
        description: Measurement of inlet cooling temperature (water or air)
      - name: outlet_temperature_celsius
        unit: Temperature
        description: Measurement of outlet cooling temperature (water or air)

tags:
  - name: Supported Time Series Metrics
    description: |
      The following metrics are supported for streaming time series data:
      
      ## Energy Metrics
      - `pdu_N_energy_consumption_joules`: PDU energy consumption readings
        - Multiple metrics exist based on the number of PDUs in the rack
        - Example for a rack with 2 PDUs:
          - `pdu_1_energy_consumption_joules`
          - `pdu_2_energy_consumption_joules`
      
      ## Temperature Metrics
      - `inlet_temperature_celsius`: Inlet cooling temperature
      - `outlet_temperature_celsius`: Outlet cooling temperature